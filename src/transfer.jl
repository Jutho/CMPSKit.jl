struct LeftTransfer{T,N}
    Q‚ÇÅ::T
    Q‚ÇÇ::T
    R‚ÇÅs::NTuple{N,T}
    R‚ÇÇs::NTuple{N,T}
end

struct RightTransfer{T,N}
    Q‚ÇÅ::T
    Q‚ÇÇ::T
    R‚ÇÅs::NTuple{N,T}
    R‚ÇÇs::NTuple{N,T}
end

function LeftTransfer(Œ®‚ÇÅ::CMPS, Œ®‚ÇÇ::CMPS = Œ®‚ÇÅ) where {CMPS<:AbstractCMPS}
    domain(Œ®‚ÇÅ) == domain(Œ®‚ÇÇ) || throw(DomainMismatch())
    return LeftTransfer(Œ®‚ÇÅ.Q, Œ®‚ÇÇ.Q, Œ®‚ÇÅ.Rs, Œ®‚ÇÇ.Rs)
end

function RightTransfer(Œ®‚ÇÅ::CMPS, Œ®‚ÇÇ::CMPS = Œ®‚ÇÅ) where {CMPS<:AbstractCMPS}
    domain(Œ®‚ÇÅ) == domain(Œ®‚ÇÇ) || throw(DomainMismatch())
    return RightTransfer(Œ®‚ÇÅ.Q, Œ®‚ÇÇ.Q, Œ®‚ÇÅ.Rs, Œ®‚ÇÇ.Rs)
end

scalartype(::Type{<:LeftTransfer{T}}) where T = scalartype(T)
scalartype(::Type{<:RightTransfer{T}}) where T = scalartype(T)

const UniformLeftTransfer = LeftTransfer{<:Constant}
const UniformRightTransfer = RightTransfer{<:Constant}

function (TL::LeftTransfer)(x; kwargs...)
    y = similar(x, promote_type(scalartype(x), scalartype(TL)))
    truncmul!(y, TL.Q‚ÇÅ', x; kwargs...)
    truncmul!(y, x, TL.Q‚ÇÇ, 1, 1; kwargs...)
    z = similar(y)
    for (R‚ÇÅ, R‚ÇÇ) in zip(TL.R‚ÇÅs, TL.R‚ÇÇs)
        mul!(z, R‚ÇÅ', x)
        truncmul!(y, z, R‚ÇÇ, 1, 1; kwargs...)
    end
    return y
end

function (TR::RightTransfer)(x; kwargs...)
    y = similar(x, promote_type(scalartype(x), scalartype(TR)))
    truncmul!(y, TR.Q‚ÇÇ, x; kwargs...)
    truncmul!(y, x, TR.Q‚ÇÅ', 1, 1; kwargs...)
    z = similar(y)
    for (R‚ÇÅ, R‚ÇÇ) in zip(TR.R‚ÇÅs, TR.R‚ÇÇs)
        mul!(z, R‚ÇÇ, x)
        truncmul!(y, z, R‚ÇÅ', 1, 1; kwargs...)
    end
    return y
end

function _full(ùïã::Union{LeftTransfer,RightTransfer}; kwargs...)
    Q‚ÇÅ = ùïã.Q‚ÇÅ
    R‚ÇÅs = ùïã.R‚ÇÅs
    Q‚ÇÇ = ùïã.Q‚ÇÇ
    R‚ÇÇs = ùïã.R‚ÇÇs
    T = map_bilinear(‚äó, Q‚ÇÅ, one(Q‚ÇÇ))
    T = axpy!(1, map_bilinear(‚äó, one(Q‚ÇÅ), conj(Q‚ÇÇ)), T)
    for (R‚ÇÅ, R‚ÇÇ) in zip(R‚ÇÅs, R‚ÇÇs)
        T = axpy!(1, map_bilinear(‚äó, R‚ÇÅ, conj(R‚ÇÇ)), T)
    end
    return T
end
